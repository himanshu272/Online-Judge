version: '3.7'

services:
  
  db:
    image: postgres:12
    env_file: 
      .db.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  redis:
    image: redis
  
  web:
    build: .
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    command: >- 
      bash -c "python manage.py makemigrations &&
      python manage.py makemigrations interface && 
      python manage.py migrate --noinput && 
      python manage.py migrate --noinput interface && 
      python manage.py collectstatic --no-input &&
      python manage.py loaddata language_models.json &&
      gunicorn judge.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    volumes:
      - app:/backend:rw
      - static:/backend/static/
      - media:/backend/media/
    env_file: 
      - .env.prod
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
  
  celery:
    build: .
    command: celery -A judge worker -l info
    volumes:
      - .:/backend
    depends_on:
      - redis
      - db 
      - web

  frontend:
    build: ./website
    command: npm run start
    env_file: 
      .frnt.env
    ports:
      - "3000:3000"

  nginx-proxy:
    container_name: nginx-proxy
    build: nginx
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - static:/backend/static
      - media:/backend/media
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - web

  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - .env.prod.proxy-comp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
    depends_on:
      - nginx-proxy


volumes:
  postgres_data:
  app:
  media:
  static:
  certs:
  html:
  vhost:
